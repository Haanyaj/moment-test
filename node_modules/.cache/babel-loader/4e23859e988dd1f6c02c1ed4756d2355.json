{"ast":null,"code":"var _jsxFileName = \"/home/haan/application-web/touch31_app/src/components/TextFieldIcon.js\";\n\n/*\n *\n *  *  Copyright (C) Thirty One, Inc - All Rights Reserved\n *  *  * Unauthorized copying of this file, via any medium is strictly prohibited\n *  *  * Proprietary and confidential\n *  *  * Written by Thirty One <thirtyoneparis@gmail.com>, 2020\n *  *\n *\n */\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport { IconButton } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  formControl: {\n    left: 30,\n    // this moves our label to the left, so it doesn't overlap when shrunk.\n    top: 0\n  },\n  disabled: {}\n});\n\nclass TextFieldIcon extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.shrinkLabel = event => {\n      const {\n        onFocus\n      } = this.props;\n      this.setState({\n        shrink: true\n      });\n      onFocus && onFocus(event); // let the child do it's thing\n    };\n\n    this.unShrinkLabel = event => {\n      const {\n        onBlur\n      } = this.props;\n\n      if (event.target.value.length === 0) {\n        this.setState({\n          shrink: false\n        }); //gotta make sure the input is empty before shrinking the label\n      }\n\n      onBlur && onBlur(event); // let the child do it's thing\n    };\n\n    this.handlePassword = () => {\n      this.setState({\n        passwordVisible: !this.state.passwordVisible\n      });\n    };\n\n    this.state = {\n      shrink: false,\n      // this is used to shrink/unshrink ( is this a correct word? ) the label\n      passwordVisible: false\n    };\n    this.handlePassword = this.handlePassword.bind(this);\n  }\n\n  render() {\n    // make sure to check endIcon and startIcon, we don't need errors in our console\n    const {\n      classes,\n      endIcon,\n      autoComplete,\n      startIcon,\n      type,\n      ...other\n    } = this.props;\n    return (\n      /*#__PURE__*/\n      React.createElement(TextField, Object.assign({}, other, {\n        type: type !== 'password' ? type : this.state.passwordVisible ? 'text' : 'password',\n        onFocus: this.shrinkLabel,\n        onBlur: this.unShrinkLabel,\n        InputLabelProps: {\n          shrink: this.state.shrink,\n          classes: classes\n        },\n        InputProps: {\n          autoComplete,\n          endAdornment: this.props.type === 'password' &&\n          /*#__PURE__*/\n          React.createElement(InputAdornment, {\n            position: \"end\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }\n          },\n          /*#__PURE__*/\n          React.createElement(IconButton, {\n            onClick: this.handlePassword,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 25\n            }\n          }, this.state.passwordVisible ?\n          /*#__PURE__*/\n          React.createElement(VisibilityIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 59\n            }\n          }) :\n          /*#__PURE__*/\n          React.createElement(VisibilityOffIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 80\n            }\n          }))),\n          startAdornment: startIcon &&\n          /*#__PURE__*/\n          React.createElement(InputAdornment, {\n            position: \"start\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 21\n            }\n          }, startIcon)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 16\n        }\n      }))\n    );\n  }\n\n}\n\nexport default withStyles(styles)(TextFieldIcon);","map":{"version":3,"sources":["/home/haan/application-web/touch31_app/src/components/TextFieldIcon.js"],"names":["React","TextField","withStyles","InputAdornment","VisibilityIcon","VisibilityOffIcon","IconButton","styles","theme","formControl","left","top","disabled","TextFieldIcon","Component","constructor","props","shrinkLabel","event","onFocus","setState","shrink","unShrinkLabel","onBlur","target","value","length","handlePassword","passwordVisible","state","bind","render","classes","endIcon","autoComplete","startIcon","type","other","endAdornment","startAdornment"],"mappings":"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","sourcesContent":["/*\n *\n *  *  Copyright (C) Thirty One, Inc - All Rights Reserved\n *  *  * Unauthorized copying of this file, via any medium is strictly prohibited\n *  *  * Proprietary and confidential\n *  *  * Written by Thirty One <thirtyoneparis@gmail.com>, 2020\n *  *\n *\n */\n\nimport React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport { IconButton } from \"@material-ui/core\";\n\nconst styles = theme => ({\n    formControl: {\n        left: 30, // this moves our label to the left, so it doesn't overlap when shrunk.\n        top: 0,\n    },\n    disabled: {},\n});\n\nclass TextFieldIcon extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            shrink: false, // this is used to shrink/unshrink ( is this a correct word? ) the label\n            passwordVisible: false,\n        }\n        this.handlePassword = this.handlePassword.bind(this);\n    }\n\n    shrinkLabel = (event) => {\n        const { onFocus } = this.props;\n        this.setState({ shrink: true });\n        onFocus && onFocus(event); // let the child do it's thing\n    };\n\n    unShrinkLabel = (event) => {\n        const { onBlur } = this.props;\n        if (event.target.value.length === 0) {\n            this.setState({ shrink: false }) //gotta make sure the input is empty before shrinking the label\n        }\n        onBlur && onBlur(event); // let the child do it's thing\n    };\n\n    handlePassword = () => {\n        this.setState({ passwordVisible: !this.state.passwordVisible })\n    }\n\n\n    render() {\n        // make sure to check endIcon and startIcon, we don't need errors in our console\n        const { classes, endIcon, autoComplete, startIcon, type, ...other } = this.props;\n        return <TextField {...other}\n            type={type !== 'password' ? type : (this.state.passwordVisible ? 'text' : 'password')}\n            onFocus={this.shrinkLabel}\n            onBlur={this.unShrinkLabel}\n            InputLabelProps={{ shrink: this.state.shrink, classes: classes }}\n            InputProps={{\n                autoComplete,\n                endAdornment: this.props.type === 'password' && (\n                    <InputAdornment position={\"end\"}>\n                        <IconButton onClick={this.handlePassword}>\n                            {this.state.passwordVisible ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                        </IconButton>\n                    </InputAdornment>\n                ),\n                startAdornment: startIcon && (\n                    <InputAdornment position={\"start\"}>\n                        {startIcon}\n                    </InputAdornment>\n                )\n            }}\n        />;\n    }\n}\n\nexport default withStyles(styles)(TextFieldIcon);"]},"metadata":{},"sourceType":"module"}